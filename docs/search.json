[{"path":"/articles/Dose_Response.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Dose Response Processing","text":"easyXpress R package read, process, analyze worm morphology data acquired cellprofiler-nf nextflow pipeline. detailed walk applying easyXpress package sample dose response data extracted toxicant dose response article published journal Toxicology. four major steps processing dose response data described detail . 1. Load Data - Read CellProfiler data select appropriate models primary objects.2. Flag Objects - Flag, check, filter problematic objects, summarize object data within wells.3. Flag Wells - Flag, check, filter problematic wells, check experimental design balance filtering.4. Finalize Results - Calculate control delta’s regress confounding effects needed.","code":"library(easyXpress) library(tidyverse)"},{"path":"/articles/Dose_Response.html","id":"get-example-dose-response-data","dir":"Articles","previous_headings":"Introduction","what":"Get example dose response data","title":"Dose Response Processing","text":"article use example data exceeds typical size package vignettes, recreate workflow clone example data AndersenLab/eXDR repository. clone example data, users need git installed machine. Follow instructions don’t git installed unsure.","code":"# specify a directory to clone the example data repository to. Here we'll clone # it to the Desktop. You can use whatever path your like here, just make sure it # is valid and ends in / ex.dir <- \"~/Desktop/\"   # clone the repo using a system command system(paste0(\"git clone https://github.com/AndersenLab/eXDR.git \",               ex.dir,               \"eXDR\"))"},{"path":"/articles/Dose_Response.html","id":"load-data","dir":"Articles","previous_headings":"","what":"Load Data","title":"Dose Response Processing","text":"Read CellProfiler data select appropriate models primary objects.","code":""},{"path":"/articles/Dose_Response.html","id":"readxpress","dir":"Articles","previous_headings":"Load Data","what":"readXpress","title":"Dose Response Processing","text":"function reads data output cellprofiler-nf R. readXpress() takes one paths project directories hold data exported cellprofiler-nf. project directory must CellProfiler data sub-folder named cp_data. Set rdafile argument name files plan use, one per project. design = TRUE, design file joined. design file located sub-folder experimental directory named design. process dose response data, users must set doseR = TRUE. arguments specified default can adjusted needed. information regarding project directory structure, see R/easyXpress. design = T readXpress() function returns list, first element named raw_data second named design.","code":"# make a vector of project directories cloned in the example data (eXDR) filedirs <- c(paste0(ex.dir, \"eXDR\", \"/20201210_toxin14A\"),             paste0(ex.dir, \"eXDR\", \"/20201217_toxin15A\"),             paste0(ex.dir, \"eXDR\", \"/20210311_toxin22A\"))  # make a vector of the .RData files cloned in the example data (eXDR) rdafiles <- c(\"20201210_toxin14A_Analysis-20231003.RData\",               \"20201217_toxin15A_Analysis-20231003.RData\",               \"20210311_toxin22A_Analysis-20231003.RData\")  # Read in the data dr <- easyXpress::readXpress(filedir = filedirs,                              rdafile = rdafiles,                              design = T,                              doseR = T) #> You set doseR = TRUE. Reading data as a dose response. #> 3 projects detected: #> loading data from 3 .rda files: #> loading ~/Desktop/eXDR/20201210_toxin14A/cp_data/20201210_toxin14A_Analysis-20231003.RData #> loading ~/Desktop/eXDR/20201217_toxin15A/cp_data/20201217_toxin15A_Analysis-20231003.RData #> loading ~/Desktop/eXDR/20210311_toxin22A/cp_data/20210311_toxin22A_Analysis-20231003.RData #> Applying length threshold of 98.811 um. #> The number of filtered rows for each model are displayed below. #>  #>  #> |model              | filtered| total_rows| #> |:------------------|--------:|----------:| #> |L1_N2_HB101_100w   |       78|      14091| #> |L2L3_N2_HB101_100w |        0|       8108| #> |L4_N2_HB101_100w   |        0|       4062| #> |MDHD               |     6945|      29763| #>  #> Applying missing parent filter. #> The number of filtered rows for each model are displayed below. #>  #>  #> |model              | filtered| total_rows| #> |:------------------|--------:|----------:| #> |L1_N2_HB101_100w   |       12|      14091| #> |L2L3_N2_HB101_100w |        0|       8108| #> |L4_N2_HB101_100w   |        0|       4062| #> |MDHD               |        5|      29763| #>  #> Primary object attributes detected. #> Calculating `wo_po_area_frac`. #> joining design file: #> ~/Desktop/eXDR/20201210_toxin14A/design/toxin14A_design.csv #> joining design file: #> ~/Desktop/eXDR/20201217_toxin15A/design/toxin15A_design.csv #> joining design file: #> ~/Desktop/eXDR/20210311_toxin22A/design/toxin22A_design.csv #> DONE"},{"path":"/articles/Dose_Response.html","id":"modelselection","dir":"Articles","previous_headings":"Load Data","what":"modelSelection","title":"Dose Response Processing","text":"modelSelection() takes raw data output readXpress() function. assign appropriate CellProfiler model primary object data frame. access raw data output readXpress() function call , can use dr$raw_data. example, data generated using 4 worm models (MDHD, L1, L2L3, L4).","code":"# The modelSelection function to select the best model for each primary object ms <- easyXpress::modelSelection(dr$raw_data) #> Removing unnecessary '.model.outputs' suffix from model names #> Found 4 worm models in data. #> MDHD #> L1_N2_HB101_100w #> L2L3_N2_HB101_100w #> L4_N2_HB101_100w"},{"path":"/articles/Dose_Response.html","id":"flag-objects","dir":"Articles","previous_headings":"","what":"Flag Objects","title":"Dose Response Processing","text":"step project processing flag problematic objects data using various ObjectFlag functions ()s. Users can filter flags retain checked.","code":""},{"path":"/articles/Dose_Response.html","id":"edgeof-and-clusterof","dir":"Articles","previous_headings":"Flag Objects","what":"edgeOF and clusterOF","title":"Dose Response Processing","text":"edgeOF() function flag objects close edge well difficult segment properly. clusterOF() function flag objects found within primary object. ‘clusters’ often debris improperly segmented worms.","code":"# Use the edgeOF fucntion ef <- edgeOF(data = ms)  # Use the clusterOF function cf <- clusterOF(data = ef)"},{"path":"/articles/Dose_Response.html","id":"checkof","dir":"Articles","previous_headings":"Flag Objects","what":"checkOF","title":"Dose Response Processing","text":"Use checkOF() function see object flags look across desired grouping variables, specified .... checkOF plot shows lot objects many clusters higher concentrations Zinc, suggests problem concentrations.","code":"c1 <- checkOF(data = cf, drug, concentration_um) #> 2 ObjectFlags detected in data. They were applied in the following order: #> edge_ObjectFlag #> cluster_ObjectFlag #> The data are summarized by: drug, concentration_um #> Returning list with elements d (the summary data frame) and p (the summary plot)  # loop at the plot returned c1$p"},{"path":"/articles/Dose_Response.html","id":"checkobjs","dir":"Articles","previous_headings":"Flag Objects","what":"checkObjs","title":"Dose Response Processing","text":"Use checkObjs() function visualize size distributions objects grouping variables. diagnostic plot made checkObjs() function shows strong bimodal distribution higher concentrations zinc suggest problem - probably debris wells.","code":"# Show just the noFlag data by setting OF = \"filter\" c2 <- checkObjs(data = cf, OF = 'filter', drug, concentration_um) #> 2 ObjectFlags detected in data. They were applied in the following order: #> edge_ObjectFlag #> cluster_ObjectFlag #> The flagged objects will be filtered from the plot.  # look at the plot returned c2"},{"path":"/articles/Dose_Response.html","id":"checkmodels","dir":"Articles","previous_headings":"Flag Objects","what":"checkModels","title":"Dose Response Processing","text":"checkModels() function used see small objects debris. function produce diagnostic plots across grouping variables. default settings help decide whether use 100um (30px) 165um (50px) size filter objects, whether use MDHD worm model . Use ?checkModels() help needed. checkModels() function used, variable specifies PATH processed images project needed. , dplyr package used add variable make well label include diagnostic overlays. checkModels() output Zinc dichloride - MDHD objects junk improperly segemnted worms, objects < 165um also problematic. objects filtered. large inset overlaid right plot provided show objects detail, included acutal function output. Based diagnostic plots checkModels() function, like example , following filters applied drug:1. Zinc dichloride - Remove objects identified MDHD model remove objects worm_length_um < 165um.2. Paraquat - Use MDHD model paraquat, remove objects worm_length_um < 165um. example shown paraquat, can see plots example directory .","code":"# Add variables that describe the PATH to processed images and well labels cm <- cf %>%   # add img dir var   dplyr::mutate(i.dir =                   dplyr::case_when(Metadata_Experiment == \"toxin14A\" ~                                            paste0(ex.dir, \"eXDR/20201210_toxin14A/processed_images/\"),                                          Metadata_Experiment == \"toxin15A\" ~                                            paste0(ex.dir, \"eXDR/20201217_toxin15A/processed_images/\"),                                          Metadata_Experiment == \"toxin22A\" ~                                            paste0(ex.dir, \"eXDR/20210311_toxin22A/processed_images/\"),                                          TRUE ~ NA_character_),                 # add well label var                 w.lab = paste(drug, strain, concentration_um, sep = \"_\"))  # use the checkModels function cm.out <- checkModels(data = cm,                       # the grouping vars (...), make a plot for each.                       Metadata_Experiment, drug,                       proc.img.dir = \"i.dir\",                       well.label = \"w.lab\",                        # save in the repo you cloned                       out.dir = paste0(ex.dir, \"eXDR/checkModels/out\")) #> Filtering flagged objects from data. #> 2 ObjectFlags detected in data. They were applied in the following order: #> edge_ObjectFlag #> cluster_ObjectFlag #> Making grob list for 8 overlays #> Making plot for 8 overlays #> Saving plot as: ~/Desktop/eXDR/checkModels/out/toxin14A_Paraquat.png #> Making grob list for 8 overlays #> Making plot for 8 overlays #> Saving plot as: ~/Desktop/eXDR/checkModels/out/toxin14A_Zinc dichloride.png #> Making grob list for 8 overlays #> Making plot for 8 overlays #> Saving plot as: ~/Desktop/eXDR/checkModels/out/toxin15A_Zinc dichloride.png #> Making grob list for 8 overlays #> Making plot for 8 overlays #> Saving plot as: ~/Desktop/eXDR/checkModels/out/toxin15A_Paraquat.png #> Making grob list for 8 overlays #> Making plot for 8 overlays #> Saving plot as: ~/Desktop/eXDR/checkModels/out/toxin22A_Paraquat.png #> Making grob list for 8 overlays #> Making plot for 8 overlays #> Saving plot as: ~/Desktop/eXDR/checkModels/out/toxin22A_Zinc dichloride.png #> DONE"},{"path":"/articles/Dose_Response.html","id":"userof","dir":"Articles","previous_headings":"Flag Objects","what":"userOF","title":"Dose Response Processing","text":"Use userOF() function add size model flags data easyXpress compatible object flag. variable added can named anything. example, named ‘user’ passed userOF function .... diagnostic plot made checkObjs() function shows bimodal distribution higher concentrations zinc improved adding user object flag.","code":"# add the user variable that will be converted to an object flag u = cm %>%   dplyr::mutate(user = dplyr::case_when(drug == \"Zinc dichloride\" &                                           model == \"MDHD\" ~ \"junk\",                                         drug == \"Zinc dichloride\" &                                           worm_length_um < 165 ~ \"junk\",                                         drug == \"Paraquat\" &                                           worm_length_um < 165 ~ \"junk\",                                         TRUE ~ NA_character_)) # Run the userOF function and specify user variable as the flag uf <- easyXpress::userOF(data = u, user) #> Converting user into an easyXpress compatible object flag (OF).  # Check the object data again to see if the bimodal distributions are resolved. checkObjs(data = uf, OF = \"filter\", drug, concentration_um) #> 3 ObjectFlags detected in data. They were applied in the following order: #> edge_ObjectFlag #> cluster_ObjectFlag #> user_ObjectFlag #> The flagged objects will be filtered from the plot."},{"path":"/articles/Dose_Response.html","id":"classifierof","dir":"Articles","previous_headings":"Flag Objects","what":"classifierOF","title":"Dose Response Processing","text":"classiferOF() function flag objects likely debris improperly segmented worms. Currently, function used 2X images obtained ImageXpress Nano run recent release cellprofiler-nf nextflow pipeline. objects NA data variables used classifier flagged output. rare, often problematic begin . Check function output see many objects flagged NA.","code":"# apply the classifierOF function cl <- classifierOF(data = uf) #> WARNING: There are 2 rows with NAs in one or more object variables used for the classifier. These rows are flagged as \"classErr\" in the output."},{"path":"/articles/Dose_Response.html","id":"outlierof","dir":"Articles","previous_headings":"Flag Objects","what":"outlierOF","title":"Dose Response Processing","text":"outlierOF function flag objects extreme worm_length_um values relative objects well. outlierOF function applied object flags set. function ignores previously flagged data searching outliers well.","code":"# apply the outlierOF function o <- easyXpress::outlierOF(data = cl) #> Previously flagged objects will not be used when calcualting outliers. This is the recommended approach. #> 4 ObjectFlags detected in data. They were applied in the following order: #> edge_ObjectFlag #> cluster_ObjectFlag #> user_ObjectFlag #> classifier_ObjectFlag #> Flagging outlier objects in each well if worm_length_um is outside the range: median +/- (1.5*IQR)"},{"path":"/articles/Dose_Response.html","id":"checkobjs-1","dir":"Articles","previous_headings":"Flag Objects","what":"checkObjs","title":"Dose Response Processing","text":"Use checkObjs() function check effect filtering object flags. strong multi-modal signals remain data reviewed ensure result biology rather anomalous features well image. plot looks much better raw data. example, bimodal distributions high concentrations Zinc largely removed.","code":"# check objects again, notice how there are 5 ObjectFlags detected now. checkObjs(data = o, OF = 'filter', drug, concentration_um) #> 5 ObjectFlags detected in data. They were applied in the following order: #> edge_ObjectFlag #> cluster_ObjectFlag #> user_ObjectFlag #> classifier_ObjectFlag #> outlier_ObjectFlag #> The flagged objects will be filtered from the plot."},{"path":"/articles/Dose_Response.html","id":"checkof-1","dir":"Articles","previous_headings":"Flag Objects","what":"checkOF","title":"Dose Response Processing","text":"Use checkOF function see much data flagged. certain conditions experiment heavily flagged suggests data may worth keeping. many flagged objects high concentration zinc. somewhat expected since wells appear lot junk . viewOverlay() function can used check wells see flags working properly whether data worth keeping.","code":"# check object flags again co2 <- checkOF(data = o, drug, concentration_um) #> 5 ObjectFlags detected in data. They were applied in the following order: #> edge_ObjectFlag #> cluster_ObjectFlag #> user_ObjectFlag #> classifier_ObjectFlag #> outlier_ObjectFlag #> The data are summarized by: drug, concentration_um #> Returning list with elements d (the summary data frame) and p (the summary plot)  # check the plot co2$p"},{"path":"/articles/Dose_Response.html","id":"viewoverlay","dir":"Articles","previous_headings":"Flag Objects","what":"viewOverlay","title":"Dose Response Processing","text":"viewOverlay() function annotate diagnostic images output cellprofiler-nf desired object data. function extremely useful troubleshooting problematic conditions experiment. Since function build array full size images, recommend sub-setting data 48 wells less reduce file sizes. setOF() function can used help annotate object flags. example , setOF() function used collapse five _ObjectFlag variables single variable named objectFlag, use annotate overlays. dplyr package also used filter data problematic conditions randomly sample eight wells pass viewOverlay() function. viewOverlay() output - objects annotated text showing objectFlag type. colors indicate worm model selected object. noFlag objects look ok, wells certainly dirty. Since flags appear working can retain wells now move . full sized version overlay saved example data directory cloned .","code":"# IMPORTANT! set the seed to ensure the 8 random wells # are found in the example images set.seed(99)  # set the flags and filter data o2 <- easyXpress::setOF(data = o) %>% # set the flags   dplyr::filter(drug == \"Zinc dichloride\" &                   concentration_um %in% c(200, 400)) %>%   #randomly sample 8 wells   dplyr::filter(well.id %in% sample(well.id, size = 8)) #> 5 ObjectFlags detected in data. They were applied in the following order: #> edge_ObjectFlag #> cluster_ObjectFlag #> user_ObjectFlag #> classifier_ObjectFlag #> outlier_ObjectFlag #> The flagged objects are labelled in the objectFlag variable.  # Use the viewOverlay function vo1 <- easyXpress::viewOverlay(data = o2,                         proc.img.dir = \"i.dir\",                         well.label = \"w.lab\",                         obj.label = \"model\",                         text.anno = \"objectFlag\",                         # save to example dir                         file = paste0(ex.dir, \"eXDR/viewOverlay/overlay1.png\"))  #> Making grob list for 8 overlays #> Making plot for 8 overlays #> Saving plot as: ~/Desktop/eXDR/viewOverlay/overlay1.png"},{"path":"/articles/Dose_Response.html","id":"filterof","dir":"Articles","previous_headings":"Flag Objects","what":"filterOF","title":"Dose Response Processing","text":"Use filterOF() function remove flagged objects data flags checked. helpful retain data final processed object data set.","code":"# finalize the object data made with outlierOF function above. proc.objs <- easyXpress::filterOF(o, rmVars = T) #> 5 ObjectFlags detected in data. They were applied in the following order: #> edge_ObjectFlag #> cluster_ObjectFlag #> user_ObjectFlag #> classifier_ObjectFlag #> outlier_ObjectFlag"},{"path":"/articles/Dose_Response.html","id":"summarizewells","dir":"Articles","previous_headings":"Flag Objects","what":"summarizeWells","title":"Dose Response Processing","text":"summarizeWells() function remove flagged objects, summarize data within well drop object related variables data. actions prepare data next step, flag wells.","code":"# remove all flags, summarize wells, and drop object vars all in one function raw.wells <- easyXpress::summarizeWells(data = o) #> 5 ObjectFlags detected in data. They were applied in the following order: #> edge_ObjectFlag #> cluster_ObjectFlag #> user_ObjectFlag #> classifier_ObjectFlag #> outlier_ObjectFlag #> All flagged objects are filtered prior to summarizing wells. #> The standard object variables are dropped from the summarized data."},{"path":"/articles/Dose_Response.html","id":"flag-wells","dir":"Articles","previous_headings":"","what":"Flag Wells","title":"Dose Response Processing","text":"Flag, check, filter problematic wells, check experimental design balance filtering.","code":""},{"path":"/articles/Dose_Response.html","id":"titerwf","dir":"Articles","previous_headings":"Flag Wells","what":"titerWF","title":"Dose Response Processing","text":"Use titerWF() function check improperly titered bleaches. function look across control conditions within grouping variables flag wells belong bleaches extreme variation worm numbers cv.n. Previous analyses suggest cv.n > 0.68 good threshold. set experiments may require different threshold, can set thresh parameter. first element retruned list tf$d flagged well data. diagnotic plot returned second element list tf$p. diagnostic plot shows one bleach large variation worm number cv.n > 0.68. wells bleach flagged.","code":"# Use the titerWF function within a particular bleach and drug for each strain tf <- easyXpress::titerWF(data = raw.wells,                           Metadata_Experiment, bleach, strain, drug,                           doseR = T) #> You set doseR = TRUE. Expecting controls to be coded as for a dose response. #> 34 independent bleaches detected. The titer_WellFlag is set in the output data. #> A diagnostic plot for checking cv.n threshold is returned. See ?titerWF() for more details.  # look at the diagnostic plot tf$p"},{"path":"/articles/Dose_Response.html","id":"nwf","dir":"Articles","previous_headings":"Flag Wells","what":"nWF","title":"Dose Response Processing","text":"Use nWF() function flag wells many objects . example, min argument set 3, flag wells less 3 objects. default value min = 5, example data sparse high concentrations toxicants value set lower. function output flagged data n$d dignostic plot n$p first second elements list. diagnostic plot faceted grouping variables specified .... plot shows distribution object counts across grouping variables min max thresholds ploted vertical lines.","code":"# use the nWF function with the data output from the titerWF function above n <- easyXpress::nWF(data = tf$d, drug, concentration_um, max = 30, min = 3) #> The n_WellFlag is set in the output data. #> A diagnostic plot for checking the object number thresholds (max, min) is returned. See <out>$.p  # Look at the diagnostic plot n$p"},{"path":"/articles/Dose_Response.html","id":"outlierwf","dir":"Articles","previous_headings":"Flag Wells","what":"outlierWF","title":"Dose Response Processing","text":"Use outlierWF() function flag wells extreme values median_wormlength_um within grouping variables specified .... Typically grouping variables isolate strains, conditions, independent bleaches, like example .","code":"# use the outlierWF function to flag outliers within groups # then use dplyr::mutate to add a variable to indicate independent bleaches. ow <- easyXpress::outlierWF(data = n$d,                             Metadata_Experiment, bleach, drug,                             concentration_um, strain) %>%   dplyr::mutate(assay_bleach = paste(Metadata_Experiment, bleach, sep = \"_\")) #> Previously flagged wells will not be used when calcualting outliers within the group. This is the recommended approach. #> 2 WellFlags detected in data. They were applied in the following order: #> titer_WellFlag #> n_WellFlag #> Flagging outlier wells in group if median_wormlength_um is outside the range: median +/- (1.5*IQR)"},{"path":"/articles/Dose_Response.html","id":"checkwf","dir":"Articles","previous_headings":"Flag Wells","what":"checkWF","title":"Dose Response Processing","text":"Use checkWF() function see many wells flagged across grouping variables specified .... diagnostic plot shows large fraction wells flagged highest Zinc concentration. can use thefilterWF() checkBalance() functions see much data retained across grouping variables relative complete experimental design flags filtered.","code":"# Use the checkWF function cw1 <- easyXpress::checkWF(data = ow, drug, concentration_um) #> 3 WellFlags detected in data. They were applied in the following order: #> titer_WellFlag #> n_WellFlag #> outlier_WellFlag #> The data are summarized by: drug, concentration_um #> Returning list with elements d (the summary data frame) and p (the summary plot)  # look at the plot cw1$p"},{"path":"/articles/Dose_Response.html","id":"filterwf","dir":"Articles","previous_headings":"Flag Wells","what":"filterWF","title":"Dose Response Processing","text":"filterWF() function remove flagged wells data.","code":"# Use the filterWF function and drop the flagging variables afterward fw <- filterWF(data = ow, rmVars = T) #> 3 WellFlags detected in data. They were applied in the following order: #> titer_WellFlag #> n_WellFlag #> outlier_WellFlag"},{"path":"/articles/Dose_Response.html","id":"checkbalance","dir":"Articles","previous_headings":"Flag Wells","what":"checkBalance","title":"Dose Response Processing","text":"Use checkBalance() function see fraction data retained flags filtered. balanced design critical effects confounding variables regressed regEff() function. original design data sourced dr$design object produced readXpress() function . example , dplyr package used add assay_bleach variable design data can joined data output form outlierWF() function used x-axis resulting plot, see code chunk . checkBalance() function returns list summary data making plot cb$d plot cb$p. plot shows flagged data fall particular bleaches. recommend independent bleaches less 75 % data retained removed. Based plot, bleaches removed drug listed .1. Paraquat - four bleaches toxin14A_2, toxin14A_3, toxin15A_1, toxin15A_3 removed.2. Zinc dichloride - five bleaches toxin14A_1, toxin14A_2, toxin15A_1, toxin15A_3, toxin22A_3 removed.","code":"# use the checkBalance function and add assay_bleach var to design cb <- checkBalance(data = fw, drug, concentration_um,                    design = dr$design %>%                      dplyr::mutate(assay_bleach =                                      paste(Metadata_Experiment, bleach)),                    x = assay_bleach) #> Joining, by = c(\"well.id\", \"assay_bleach\", \"drug\", \"concentration_um\") #> Returning list with elements d (the summary data frame) and p (the summary plot)  # Look at the plot and add a nicer x-axis with ggplot2 package cb$p +   ggplot2::theme(axis.text.x = ggplot2::element_text(angle = 90, vjust = 0.5)) +   ggplot2::geom_hline(yintercept = 0.75, linetype = 2, color = \"red\")"},{"path":"/articles/Dose_Response.html","id":"checkeff","dir":"Articles","previous_headings":"Flag Wells","what":"checkEff","title":"Dose Response Processing","text":"checkEff() function used look data problematic bleaches removed. help checkEff() function use ?checkEff(). dose effect expected two strains, increasing concentrations toxicants reduce length animals wells. effect assay bleach can tested regEff() function.","code":"# filter the unbalanced bleaches - nearly half the data in this example. drop <- fw %>%   dplyr::mutate(b.filter =                   dplyr::case_when(drug == \"Paraquat\" &assay_bleach %in%                                      c(\"toxin14A_2\",                                        \"toxin14A_3\",                                        \"toxin15A_1\",                                        \"toxin15A_3\") ~  \"drop\",                                    drug == \"Zinc dichloride\" & assay_bleach %in%                                      c(\"toxin14A_1\",                                        \"toxin14A_2\",                                        \"toxin15A_1\",                                        \"toxin15A_3\",                                        \"toxin22A_3\") ~ \"drop\",                                    TRUE ~ \"keep\")) %>%   dplyr::filter(b.filter == \"keep\") %>%   dplyr::select(-b.filter)  # use the checkEff function ce1 <- easyXpress::checkEff(data = drop,                             drug, strain,                             x = concentration_um,                             y = median_wormlength_um,                             fill = assay_bleach,                             scales = \"free_x\") #> Warning: Using `as.character()` on a quosure is deprecated as of rlang 0.3.0. #> Please use `as_label()` or `as_name()` instead.  # look at the plot ce1"},{"path":[]},{"path":"/articles/Dose_Response.html","id":"regeff","dir":"Articles","previous_headings":"Finalize Results","what":"regEff","title":"Dose Response Processing","text":"regEff() function regress effect confounding variable dependent variable within groups specified .... function extracts residuals linear model specified d.var ~ c.var - 1 remove estimated influence confounding variable c.var dependent variable d.var. function returns list four elements. residuals method used carefully can introduce noise data awill also produce diagnostic plots recommend testing using regEff() function important well balanced design. effect bleach diagnostic plot shows point estimates regression coefficients indepedent bleaches faceted drug standard errors lines. recommend filtering bleaches extreme effects. extreme bleach effects filter.","code":"# Regress the effect of independent bleaches for each drug using regEff() reg <- easyXpress::regEff(data = drop,                           drug,                           d.var = median_wormlength_um,                           c.var = assay_bleach) #> The dependent variable `median_wormlength_um` is class numeric. Please ensure this is correct. #> The confounding variable `assay_bleach` is class character. Please ensure this is correct. #> The data are grouped by: `drug`  # Look at the regression coefficients in the diagnostic plot p2 reg$p2"},{"path":"/articles/Dose_Response.html","id":"delta","dir":"Articles","previous_headings":"Finalize Results","what":"delta","title":"Dose Response Processing","text":"delta() function used control innate differences among strains. function calculate difference well summary statistics experimental condition median control condition within group. recommended group data independent bleaches strains drugs processing dose response data. final step processing data. See help delta() function ?delta(). finalized data can used fit dose response curves `dr","code":"# use the delta() function del <- easyXpress::delta(data = reg$d,                          assay_bleach, drug, strain, # group with ...                          WF = \"filter\",                          doseR = TRUE,                          vars = \"median_wormlength_um_reg\") #> You set doseR = TRUE. Expecting controls to be coded as for a dose response. #> No flagged wells detected. #> The data are grouped by, assay_bleach, drug, strain. #> The mean control value within groups has been subtracted from the well summary statstics: #> median_wormlength_um_reg  # check the finalized data checkEff(data = del, drug, strain, x = concentration_um,          y = median_wormlength_um_reg_delta,          fill = assay_bleach,          scales = \"free_x\")"},{"path":"/articles/easyXpress.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"A walk-through of easyXpress","text":"easyXpress R package read, process, analyze worm data acquired Molecular Devices ImageExpress Nano Imager processed CellProfiler’s WormToolbox. provides functions reading, flagging, pruning data. Additional functionalities available visualizing plate well images, well displaying dose response data. complete easyXpress package consists nine functions: readXpress, modelSelection, edgeFlag, setFlags, process, Xpress, viewPlate, viewWell, viewDose. detailed walk applying easyXpress package sample dataset generated CellProfiler. details regarding generation data used , see Andersen Lab Image Analysis Pipeline.","code":"library(easyXpress)"},{"path":"/articles/easyXpress.html","id":"reading-in-data-readxpress","dir":"Articles","previous_headings":"","what":"Reading in data: readXpress()","title":"A walk-through of easyXpress","text":"primary function reading CellProfiler data R package. readXpress() takes path project directory CellProfiler data files argument. directory CellProfiler data sub-folder named cp_data. file(s) must .RData format*. specify specific .Rdata file analyzed, set rdafile argument name particular file interest. design = TRUE, design file joined. design file located sub-folder experimental directory named design. design = FALSE, design file joined. function output single data frame containing CellProfiler model outputs well experimental treatments design file used. information regarding directory structure, see R/easyXpress. *wish analyze data .RData format, ensure data meets following criteria: Can treated data frame. Contains column named worm_length_um worm length units microns. Contains column named model proper designation model information associated object measured. Subset data frame","code":"## In this example, there is no design file. As such, the argument design = FALSE  # Define experimental directory and file name dirs <- rprojroot::find_package_root_file(\"vignettes\", \"example_data\") datafile <- \"CellProfiler-Analysis_20191119_example_data.RData\"  # Read in the data raw <- easyXpress::readXpress(filedir = dirs, rdafile = datafile, design = FALSE)"},{"path":"/articles/easyXpress.html","id":"selecting-appropriate-model-modelselection","dir":"Articles","previous_headings":"","what":"Selecting appropriate model: modelSelection()","title":"A walk-through of easyXpress","text":"modelSelection() takes argument raw data output readXpress() function. assign appropriate CellProfiler model primary object data frame. example, data generated using 4 worm models: L1, L2L3, L4, Adult. Subset data frame Notice additional columns (shown ) added data frame. provides information number objects per model identified observation. cases 2 objects idenfied single model, specified cluster noted model_flag","code":"model_selected <- easyXpress::modelSelection(raw)"},{"path":"/articles/easyXpress.html","id":"setting-flags","dir":"Articles","previous_headings":"","what":"Setting flags","title":"A walk-through of easyXpress","text":"next two steps involve adding multiple flags data.","code":""},{"path":"/articles/easyXpress.html","id":"well-edge-flags-edgeflags","dir":"Articles","previous_headings":"Setting flags","what":"Well edge flags: edgeFlags()","title":"A walk-through of easyXpress","text":"function flags worms near well edge, thus marking observations may fall regions uneven illumination. edgeFlag() takes input standard output modelSelection() function. Three additonal arguments may user defined: radius - radius (pixels) away image center even illumination. Set 825 default. center_x - center x position image. Set 1024 default center_y - center y position image. Set 1024 default function returns single data frame worm objects edge well identified, retained.","code":"edge_flagged <- easyXpress::edgeFlag(model_selected, radius=825, center_x=1024, center_y=1024)"},{"path":"/articles/easyXpress.html","id":"cluster-outlier-flags-setflags","dir":"Articles","previous_headings":"Setting flags","what":"Cluster & outlier flags: setFlags()","title":"A walk-through of easyXpress","text":"function flags suspect data points within wells. setFlags() takes data following edgeFlag input outputs single data frame containing identified flags (.e. worm cluster flag, well edge flag, well outlier flag). Two additonal arguments may user defined: cluster_flag Logical parameter; want worm objects cluster excluded calculating well outliers? recommend TRUE default. well_edge_flag Logical parameter; want worm objects close proximity well edge excluded calculating well outliers? recommend TRUE default. single data frame containing CellProfiler model outputs flags returned.","code":"raw_flagged <- easyXpress::setFlags(edge_flagged, cluster_flag = TRUE, well_edge_flag = TRUE) #> [1] \"FILTERING BOTH CLUSTER AND WELL EDGE FLAGS\""},{"path":"/articles/easyXpress.html","id":"process-and-summarize-process","dir":"Articles","previous_headings":"","what":"Process and summarize: process()","title":"A walk-through of easyXpress","text":"process() takes argument flagged data output setFlags() function. output list containing four elements: raw data, processed data, summaries datasets. raw data list item identical output readXpress() function. processed data list item raw data following removal identified flags setFlags() function. two summary outputs data summarizing supplied parameter .... Processed list items","code":"processed <- easyXpress::process(raw_flagged, Metadata_Plate, Metadata_Well) #> [1] \"SUMMARIZED BY Metadata_Plate\" \"SUMMARIZED BY Metadata_Well\""},{"path":"/articles/easyXpress.html","id":"wrapper-function-xpress","dir":"Articles","previous_headings":"","what":"Wrapper function: Xpress()","title":"A walk-through of easyXpress","text":"also included wrapper function run functions package. user may choose alter input arguments maintain default. user must specify: Experimental directory Rdafile name analyzed Variable(s) used summarize data ... (see process() function)","code":"processed <- easyXpress::Xpress(filedir = dirs, rdafile = datafile, Metadata_Plate, Metadata_Well) #> [1] \"FILTERING BOTH CLUSTER AND WELL EDGE FLAGS\" #> [1] \"SUMMARIZED BY Metadata_Plate\" \"SUMMARIZED BY Metadata_Well\""},{"path":"/articles/easyXpress.html","id":"visualize-data","dir":"Articles","previous_headings":"","what":"Visualize Data","title":"A walk-through of easyXpress","text":"three functions visualizing proccessed data generated process() Xpress() functions.","code":""},{"path":"/articles/easyXpress.html","id":"plate-view-viewplate","dir":"Articles","previous_headings":"Visualize Data","what":"Plate view: viewPlate()","title":"A walk-through of easyXpress","text":"viewPlate() takes input summarised data output process() function. Either raw processed data can viewed. user must specify plate analyzed. function output plotly object selected plate information displayed.","code":"## This example uses a new dataset. Reading & processing of this dataset is not shown ##  # To start, save summarized_processed list element to new variable: # processed_plate_data <- processed[[4]]  # view plate easyXpress::viewPlate(processed_plate_data, \"p61\")"},{"path":"/articles/easyXpress.html","id":"well-view-viewwell","dir":"Articles","previous_headings":"Visualize Data","what":"Well view: viewWell()","title":"A walk-through of easyXpress","text":"viewWell() takes input either raw processed unsummarized data output process() Xpress() well full path directory holding processed images. returns plot processed well image object centroids colored type. Optional argument boxplot = TRUE includes boxplot objct data well image.","code":"## This example shows the processed data  # Saving processed_data list element to new variable proc_data <- processed[[2]]  # Define processed image directory proc_img_dir <- rprojroot::find_package_root_file(\"vignettes\", \"example_data\", \"ProcessedImages\")  easyXpress::viewWell(proc_data, proc_img_dir, \"p61\", \"C02\", boxplot = TRUE)  #> Warning: `guides(<scale> = FALSE)` is deprecated. Please use `guides(<scale> = #> \"none\")` instead."},{"path":"/articles/easyXpress.html","id":"dose-response-view-viewdose","dir":"Articles","previous_headings":"Visualize Data","what":"Dose Response view: viewDose()","title":"A walk-through of easyXpress","text":"viewDose() takes input either raw processed unsummarized data output process() Xpress() outputs representative processed well images object centroids colored type concentration drug. provided sample data include dose response information. information use command ?viewDose access documentation.","code":"## This example uses a new dataset. Reading & processing of this dataset is not shown ##  # Saving data elements to new variable proc_dose_data <- processed_dose_data[[2]] raw_dose_data <- processed_dose_data[[1]]  # Define processed image directory proc_img_dir <- rprojroot::find_package_root_file(\"vignettes\", \"example_data\", \"ProcessedImages\")  # View example images and object types from raw or processed dose response data plot_proc <- easyXpress::viewDose(proc_dose_data, strain_name = \"PD1074\", drug_name = \"paraquat\", proc_img_dir = proc_img_dir)  plot_raw <- easyXpress::viewDose(raw_dose_data, strain_name = \"PD1074\", drug_name = \"paraquat\", proc_img_dir = proc_img_dir)   ## showing processed dose response data only ## plot_proc"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Tim Crombie. Author, maintainer. Joy Nyaanga. Author. Sam Widmayer. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Crombie T, Nyaanga J, Widmayer S (2023). easyXpress: Package Read, Process, Analyze Worm Data Generated CellProfiler’s WormToolbox. R package version 2.0.0, http://andersenlab.org/easyXpress/.","code":"@Manual{,   title = {easyXpress: A Package to Read, Process, and Analyze Worm Data Generated from CellProfiler’s WormToolbox},   author = {Tim Crombie and Joy Nyaanga and Sam Widmayer},   year = {2023},   note = {R package version 2.0.0},   url = {http://andersenlab.org/easyXpress/}, }"},{"path":[]},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"A Package to Read, Process, and Analyze Worm Data Generated from CellProfiler’s WormToolbox","text":"package designed reading, processing, visualizing nematode morphology data extracted images using CellProfiler’s WormToolbox.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A Package to Read, Process, and Analyze Worm Data Generated from CellProfiler’s WormToolbox","text":"easyXpress specialized use image data produced cellprofiler-nf nextflow pipeline. install easyXpress need devtools package. can install devtools easyXpress using commands : OS X installations easyXpress require XQuartz installed. Follow instructions install XQuartz. functionality package can broken three main goals: Reading data generated CellProfiler pipelines alongside information experimental design. Flagging pruning anomalous data points. Generating diagnostic images. information implementing cellprofiler-nf generate data used easyXpress package, see AndersenLab/cellprofiler-nf.","code":"install.packages(\"devtools\") devtools::install_github(\"AndersenLab/easyXpress\")"},{"path":"/index.html","id":"directory-structure","dir":"","previous_headings":"","what":"Directory structure","title":"A Package to Read, Process, and Analyze Worm Data Generated from CellProfiler’s WormToolbox","text":"directory structure holding data critically important. example correct project directory structure. cp_data directory contains .RData file output cellprofiler-nf. processed_images directory contains _overlay.png files output cellprofiler-nf. one .png file well included analysis. design directory contains .csv variables necessary describe experiment (.e. experiment names, drug names, drug concentrations, strain names, food types, etc.). condition information need design directory. directory exhibits minimal file content naming easyXpress package work.","code":"/projects/20200812_example ├── cp_data │   ├── CellProfiler-Analysis_20191119_example_data.RData └── processed_images │   ├── 20191119-growth-p01-m2x_A01_overlay.png │   ├── 20191119-growth-p01-m2x_A02_overlay.png │   ├── 20191119-growth-p01-m2x_A03_overlay.png │   ├── ...     ├── design     └── 20191119_design.csv"},{"path":"/index.html","id":"project-directory","dir":"","previous_headings":"Directory structure","what":"Project directory","title":"A Package to Read, Process, and Analyze Worm Data Generated from CellProfiler’s WormToolbox","text":"project directory contains files attached specific experiment conducted specific date. naming convention folders include date format 4-digit year::2-digit month::2-digit day experiment name separated underscores.","code":"# Example directory name # Date is January 1st, 2020 # Experiment name is \"ExperimentName\"  20200101_ExperimentName/"},{"path":"/index.html","id":"file-naming","dir":"","previous_headings":"Directory structure","what":"File naming","title":"A Package to Read, Process, and Analyze Worm Data Generated from CellProfiler’s WormToolbox","text":"processed image files formatted experiment data, name experiment, plate number, magnification used imaging, well name. processed image files must saved .png files. file named 20191119-growth-p01-m2x_A01_overlay.png first section 20191119 experiment date, growth name experiment, p01 plate number, m2x magnification used imaging, A01 well name.","code":""},{"path":"/index.html","id":"package-overview","dir":"","previous_headings":"","what":"Package Overview","title":"A Package to Read, Process, and Analyze Worm Data Generated from CellProfiler’s WormToolbox","text":"easyXpress package consists six function classes work together clean process experimental data. tidy functions help pre-process raw images get ready submission cellprofiler-nf pipeline. ObjectFlag functions help flag problematic data output cellprofiler-nf. WellFlag WF functions work flag anomalous summary statistics micro-plate wells. Throughout data cleaning workflow, check view function classes used validate whether flag functions properly applied. functions serve facilitate cleaning process standardized naming convention. detailed information regarding use functions, see article: Dose Response Processing.","code":""},{"path":"/index.html","id":"citation","dir":"","previous_headings":"Package Overview","what":"Citation","title":"A Package to Read, Process, and Analyze Worm Data Generated from CellProfiler’s WormToolbox","text":"Please cite following publications use easyXpress: #### easyXpress: R package analyze visualize high-throughput C. elegans microscopy data generated using CellProfiler #### Joy Nyaanga, Timothy . Crombie, Samuel J. Widmayer, Erik C. Andersen #### (2021 August 12) PLoS ONE #### PLoS ONE PubMed","code":""},{"path":"/reference/Xpress.html","id":null,"dir":"Reference","previous_headings":"","what":"Xpress — Xpress","title":"Xpress — Xpress","text":"wrapper function run functions package output processed dataframe.","code":""},{"path":"/reference/Xpress.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Xpress — Xpress","text":"","code":"Xpress(   filedir,   rdafile,   ...,   design = FALSE,   radius = 825,   center_x = 1024,   center_y = 1024,   cluster_flag = TRUE,   well_edge_flag = TRUE )"},{"path":"/reference/Xpress.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Xpress — Xpress","text":"filedir project directory directories CellProfiler data. Provide full path directory vector project directory paths. directory must cellprofiler-nf output .rda file sub-folder named cp_data. rdafile specific .rda file name cp_data directory read. multiple project directories supplied filedir, include .rda files project order directories given filedir. ... specify variable used summarize data. Variable names can listed succession. design Logical parameter, TRUE design file joined data. design file located sub-folder filedir named design. FALSE design file joined. radius Radius pixels away image center even illumination. center_x center x position image center_y center y position image cluster_flag Logical parameter; want worm objects cluster excluded calculating well outliers? recommend TRUE default. well_edge_flag Logical parameter; want worm objects close proximity well edge excluded calculating well outliers? recommend TRUE default.","code":""},{"path":"/reference/Xpress.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Xpress — Xpress","text":"List four elements: raw data, processed data, summaries datasets.","code":""},{"path":"/reference/checkBalance.html","id":null,"dir":"Reference","previous_headings":"","what":"checkBalance — checkBalance","title":"checkBalance — checkBalance","text":"function visualize experimenta balance filtering objects wells. function requires design data frame.","code":""},{"path":"/reference/checkBalance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"checkBalance — checkBalance","text":"","code":"checkBalance(data, ..., design, x, size = 3)"},{"path":"/reference/checkBalance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"checkBalance — checkBalance","text":"data data frame output easyXpress function summarizeWells function. ... <[rlang::`dyn-dots`]> Variable(s) used facet data output plot. Variable names can listed succession. design design data frame like one output readXpress function one read R raw design file(s). variables specified ... x must present design data frame. x independent variable use x-axis plot. example, strain. quotes needed. size size number label used plotting. default 3.","code":""},{"path":"/reference/checkBalance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"checkBalance — checkBalance","text":"list containing two elements. 1) data frame used make diagnostic plot 2) plot showing data completeness post filtering. faceted ....","code":""},{"path":"/reference/checkEff.html","id":null,"dir":"Reference","previous_headings":"","what":"checkEff — checkEff","title":"checkEff — checkEff","text":"function visualize experimental effects detect potential issues data.","code":""},{"path":"/reference/checkEff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"checkEff — checkEff","text":"","code":"checkEff(data, ..., x, y, fill = NULL, size = 1.5, scales = \"fixed\")"},{"path":"/reference/checkEff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"checkEff — checkEff","text":"data data frame output easyXpress function used modelSelection function. ... <[rlang::`dyn-dots`]> Variable(s) used facet data output plot. Variable names can listed succession. x independent variable use x-axis plot. example, strain. quotes needed. y dependent variable use y-zxis plot. example, median_wormlength_um. quotes needed. fill variable used fill data points. size size points plotted ggplot2::geom_jitter. default 1.5. scales plot axes facets. scales fixed (\"fixed\", default), free (\"free\"), free one dimension (\"free_x\", \"free_y\")?","code":""},{"path":"/reference/checkEff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"checkEff — checkEff","text":"box plot data points jittered behind. plot faceted variables supplied ...,","code":""},{"path":"/reference/checkModels.html","id":null,"dir":"Reference","previous_headings":"","what":"checkModels — checkModels","title":"checkModels — checkModels","text":"function create one arrays image overlays help users evaluate cellprofiler model performance object length thresholds.","code":""},{"path":"/reference/checkModels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"checkModels — checkModels","text":"","code":"checkModels(   data,   ...,   modelName = \"MDHD\",   OF = \"filter\",   length_thresh = 164.685,   strainN = 4,   wellN = 4,   proc.img.dir,   well.label,   out.dir )"},{"path":"/reference/checkModels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"checkModels — checkModels","text":"data data frame output modelSelection function function easyXpress. ... <[`dynamic-dots`][rlang::dyn-dots]> Variable(s) used group data. Variable names data supplied separated commas without quotes. example drug, concentration_um. modelName name cellprofiler model check diagnostic plots. Typically smallest model dataset. default set \"MDHD\". Select one \"filter\", \"ignore\". default \"filter\", filter objects flagged OFs. \"ignore\" include objects diagnostic plots. length_thresh object length threshold um used label objects data. default setting 164.685 um. standard threshold used AndersenLab 2X objective images. Please adjust necessary. strainN maximum number strains include overlay. function return maximum strainN strains per overlay array. strains chosen lowest average object length group. wellN maximum number wells include overlay. function return maximum wellN wells per strain within overlay array. wells chosen lowest average object length within strains included overlay array. proc.img.dir Supply one two options. 1: full path directory holding processed images. example, \"~/proc_images/\". 2: variable name data holds full path directory holding processed images matching data. option helpful processed images kept directory. Users need add variable data frame . example, \"image_path\". either option work processed images must standard _overlay.png suffix file name output CellProfiler. well.label variable name data display well label. example, \"Metadata_Well\". .dir full path existing directory used hold overlays.","code":""},{"path":"/reference/checkModels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"checkModels — checkModels","text":"dataframe nested grouping variables without flagged objects removed.","code":""},{"path":"/reference/checkOF.html","id":null,"dir":"Reference","previous_headings":"","what":"checkOF — checkOF","title":"checkOF — checkOF","text":"checkOF","code":""},{"path":"/reference/checkOF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"checkOF — checkOF","text":"","code":"checkOF(data, ..., plot = T)"},{"path":"/reference/checkOF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"checkOF — checkOF","text":"data data frame output ObjectFlag () function easyXpress. ... <[`dynamic-dots`][rlang::dyn-dots]> Variable(s) used group data. Variable names data supplied separated commas without quotes. example, drug, strain. plot Logical, TRUE, default, ggplot2 object returned list.","code":""},{"path":"/reference/checkOF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"checkOF — checkOF","text":"plot = TRUE list two elements returned. first element (d) data frame summarized ..., numbers objects flagged retained applied data. second element (p) ggplot2 object showing objects retained filtering faceted ... plot = FALSE data frame returned.","code":""},{"path":"/reference/checkObjs.html","id":null,"dir":"Reference","previous_headings":"","what":"checkObjs — checkObjs","title":"checkObjs — checkObjs","text":"function help detect potential issues data visualizing size type objects across grouping variables.","code":""},{"path":"/reference/checkObjs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"checkObjs — checkObjs","text":"","code":"checkObjs(data, OF, ...)"},{"path":"/reference/checkObjs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"checkObjs — checkObjs","text":"data data frame output modelSelection function function easyXpress. Select one \"filter\", \"label\", \"ignore\". default \"filter\", filter objects flagged OFs. \"label\" fill flagged objects OFs fill objects flagged model names. \"ignore\" fill objects model names. ... <[`dynamic-dots`][rlang::dyn-dots]> Variable(s) used summarize data. Variable names can listed succession.","code":""},{"path":"/reference/checkObjs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"checkObjs — checkObjs","text":"plot faceted grouping variables ..., objects labelled CellProfiler worm model OFs specified.","code":""},{"path":"/reference/checkWF.html","id":null,"dir":"Reference","previous_headings":"","what":"checkWF — checkWF","title":"checkWF — checkWF","text":"checkWF","code":""},{"path":"/reference/checkWF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"checkWF — checkWF","text":"","code":"checkWF(data, ..., plot = T)"},{"path":"/reference/checkWF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"checkWF — checkWF","text":"data data frame output WellFlag (WF) function easyXpress. ... <[`dynamic-dots`][rlang::dyn-dots]> Variable(s) used group data. Variable names data supplied separated commas without quotes. plot Logical, TRUE, defualt, ggplot2 well returned list. example, drug, strain.","code":""},{"path":"/reference/checkWF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"checkWF — checkWF","text":"plot = TRUE list two elements returned. first element (d) data frame summarized ..., numbers wells flagged retained WF applied data. second element (p) ggplot2 object showing wells retained filtering faceted ... plot = FALSE data frame returned.","code":""},{"path":"/reference/classifierOF.html","id":null,"dir":"Reference","previous_headings":"","what":"classifierOF — classifierOF","title":"classifierOF — classifierOF","text":"function flag non-worm objects using machine learning.","code":""},{"path":"/reference/classifierOF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"classifierOF — classifierOF","text":"","code":"classifierOF(data, model = \"gbm2x\", thresh = 0.6)"},{"path":"/reference/classifierOF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"classifierOF — classifierOF","text":"data data frame output modelSelection function. model Specify one built models. Currently \"gbm2x\" available. classifier trained 1,000 worm objects selected large GWAS experiment classifies objects \"worm\" \"non-worm\" ~90 NOTE: model trained classify poorly segmented worms 'non-worm' true worms often classified \"non-worm\". thresh probability threshold flagging objects based classifier. default thresh st 0.6. objects classifier predicts improperly segmented, probability greater thres, flagged.","code":""},{"path":"/reference/classifierOF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"classifierOF — classifierOF","text":"single data frame identical input data classifier_ObjectFlag variable added. classifier_ObjectFlag variable coded \"classifier\" objects called non-worm 2X classifier. objects coded NA_character, NAs variables used classify objects coded \"classErr\". gbm2x_worm_prob variable provides probability object properly segmented worm.","code":""},{"path":"/reference/clusterOF.html","id":null,"dir":"Reference","previous_headings":"","what":"clusterOF — clusterOF","title":"clusterOF — clusterOF","text":"function flag objects belong Parent_WormObject identified cellprofiler.","code":""},{"path":"/reference/clusterOF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"clusterOF — clusterOF","text":"","code":"clusterOF(data)"},{"path":"/reference/clusterOF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"clusterOF — clusterOF","text":"data data frame output modelSelection edgeOF functions.","code":""},{"path":"/reference/clusterOF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"clusterOF — clusterOF","text":"single data frame identical input data cluster_ObjectFlag variable added. cluster_ObjectFlag variable coded \"cluster\" objects clustered, objects coded NA_character.","code":""},{"path":"/reference/delta.html","id":null,"dir":"Reference","previous_headings":"","what":"delta — delta","title":"delta — delta","text":"function calculate difference well summary statistics experimental condition median control condition within group. proper grouping variables supplied ....","code":""},{"path":"/reference/delta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"delta — delta","text":"","code":"delta(   data,   ...,   WF = \"filter\",   vars = c(\"median_wormlength_um\", \"cv_wormlength_um\"),   doseR = F )"},{"path":"/reference/delta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"delta — delta","text":"data data frame output WF function. ... <[`dynamic-dots`][rlang::dyn-dots]> Variable(s) used group data. recommended group data independent bleaches strains. Variable names data supplied separated commas without quotes. example, typical variables grouping Metadata_Experiment, bleach, strain. WF Select \"filter\" \"ignore\". default, \"filter\", filter flagged wells calculating delta control, present. \"ignore\" calculate delta including flagged data. careful using \"ignore\", included diagnostic purposes. vars well summary statistics perform delta calculation . supplied character vector. example, default set c(\"median_wormlength_um\", \"cv_wormlength_um\"). doseR Logical, dose response data? default, doseR = FALSE, expects control data recorded design file particular way. Specifically, drug diluent variables identical controls, e.g, drug = DMSO, diluent = DMSO, concentration_um = 0. doseR = TRUE, controls expected coded differently, .e.g, drug = ABZ, diluent = DMSO, concentration_um = 0. Warning messages produced controls fit expectations, try ensure controls coded properly without relying function catch edge cases.","code":""},{"path":"/reference/delta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"delta — delta","text":"data frame identical input control delta variables added, .e., median_wormlength_um_delta cv_wormlength_um_delta. median values control conditions also added control_median_wormlength_um control_cv_wormlength_um.","code":""},{"path":"/reference/easyXpress-package.html","id":null,"dir":"Reference","previous_headings":"","what":"easyXpress: A Package to Read, Process, and Analyze Worm Data Generated from CellProfiler’s WormToolbox — easyXpress-package","title":"easyXpress: A Package to Read, Process, and Analyze Worm Data Generated from CellProfiler’s WormToolbox — easyXpress-package","text":"workflow reading, processing, visualization nematode morphology data extracted images using CellProfiler's WormToolbox. Includes powerful suite functions process large high-throughput image based datasets.","code":""},{"path":"/reference/easyXpress-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"easyXpress: A Package to Read, Process, and Analyze Worm Data Generated from CellProfiler’s WormToolbox — easyXpress-package","text":"quick introduction easyXpress see vignette: walk-easyXpress.","code":""},{"path":"/reference/easyXpress-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"easyXpress: A Package to Read, Process, and Analyze Worm Data Generated from CellProfiler’s WormToolbox — easyXpress-package","text":"Maintainer: Tim Crombie tim.crombie@gmail.com (ORCID) Authors: Joy Nyaanga jnyaan@gmail.com (ORCID) Sam Widmayer sjwidmay@gmail.com (ORCID)","code":""},{"path":"/reference/edgeFlag.html","id":null,"dir":"Reference","previous_headings":"","what":"edgeFlag — edgeFlag","title":"edgeFlag — edgeFlag","text":"primary function flagging well edge worms CellProfiler data","code":""},{"path":"/reference/edgeFlag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"edgeFlag — edgeFlag","text":"","code":"edgeFlag(model_selected_data, radius = 825, center_x = 1024, center_y = 1024)"},{"path":"/reference/edgeFlag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"edgeFlag — edgeFlag","text":"model_selected_data data frame selected worm model denotations joined assigned worm object radius Radius pixels away image center even illumination. center_x center x position image center_y center y position image","code":""},{"path":"/reference/edgeFlag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"edgeFlag — edgeFlag","text":"single data frame worm objects edge well identified retained","code":""},{"path":"/reference/edgeOF.html","id":null,"dir":"Reference","previous_headings":"","what":"edgeOF — edgeOF","title":"edgeOF — edgeOF","text":"function flag objects edge wells often difficult segment properly CellProfiler.","code":""},{"path":"/reference/edgeOF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"edgeOF — edgeOF","text":"","code":"edgeOF(data, radius = 825, center_x = 1024, center_y = 1024)"},{"path":"/reference/edgeOF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"edgeOF — edgeOF","text":"data data frame output modelSelection function. radius Radius pixels away image center even illumination. default value set 825, standard images taken imageXpress nano 2X objective. center_x center x position image pixels. Default 1024. center_y center y position image pixels. Default 1024.","code":""},{"path":"/reference/edgeOF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"edgeOF — edgeOF","text":"single data frame edge_ObjectFlag well_edge_flag_radius variables added. edge_ObjectFlag variable coded \"edge\" objects centroids outside radius provided, objects coded NA_character.","code":""},{"path":"/reference/filterOF.html","id":null,"dir":"Reference","previous_headings":"","what":"filterOF — filterOF","title":"filterOF — filterOF","text":"function filter flagged objects identified _ObjectFlag variables.","code":""},{"path":"/reference/filterOF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"filterOF — filterOF","text":"","code":"filterOF(data, rmVars = TRUE)"},{"path":"/reference/filterOF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"filterOF — filterOF","text":"data data frame _ObjectFlag variables. Typically data generated easyXpress functions. rmVars Logical, TRUE _ObjectFlag variables removed data frame flagged objects removed. FALSE, variables retained. argument can useful joining data frames. default TRUE.","code":""},{"path":"/reference/filterOF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"filterOF — filterOF","text":"single data frame flagged objects removed.","code":""},{"path":"/reference/filterWF.html","id":null,"dir":"Reference","previous_headings":"","what":"filterWF — filterWF","title":"filterWF — filterWF","text":"function filter flagged wells identified _WellFlag variables.","code":""},{"path":"/reference/filterWF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"filterWF — filterWF","text":"","code":"filterWF(data, rmVars = TRUE)"},{"path":"/reference/filterWF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"filterWF — filterWF","text":"data data frame _WellFlag variables. Typically data generated easyXpress WF functions. rmVars Logical, TRUE _WellFlag variables removed data frame flagged objects removed. FALSE, variables retained. argument can useful joining data frames. default TRUE.","code":""},{"path":"/reference/filterWF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"filterWF — filterWF","text":"single data frame flagged wells removed.","code":""},{"path":"/reference/gbm2x.html","id":null,"dir":"Reference","previous_headings":"","what":"The standard gradient boosted classifier for AndersenLab 2X images — gbm2x","title":"The standard gradient boosted classifier for AndersenLab 2X images — gbm2x","text":"stochastic gradient boosted classifier trained 1,089 worm objects selected broad range experimental conditions using caret R package (v6.0-92) (Kuhn 2008). classifier accuracy 89.6 10-fold cross-validation.","code":""},{"path":"/reference/gbm2x.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The standard gradient boosted classifier for AndersenLab 2X images — gbm2x","text":"","code":"gbm2x"},{"path":"/reference/gbm2x.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"The standard gradient boosted classifier for AndersenLab 2X images — gbm2x","text":"## `gbm2x` Large train object 24 elements.","code":""},{"path":"/reference/gbm2x.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"The standard gradient boosted classifier for AndersenLab 2X images — gbm2x","text":"<https://github.com/AndersenLab/2021_GWA_data_cleaning>","code":""},{"path":"/reference/iqrOutlier.html","id":null,"dir":"Reference","previous_headings":"","what":"iqrOutlier — iqrOutlier","title":"iqrOutlier — iqrOutlier","text":"function identify outliers using interquartile range (IQR).","code":""},{"path":"/reference/iqrOutlier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"iqrOutlier — iqrOutlier","text":"","code":"iqrOutlier(x, na.rm = TRUE, thresh)"},{"path":"/reference/iqrOutlier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"iqrOutlier — iqrOutlier","text":"x numerical vector perform outlier removal . na.rm Logical, TRUE, NAs removed claculation. thresh Numeric, constant multiply IQR detecting outiers.","code":""},{"path":"/reference/iqrOutlier.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"iqrOutlier — iqrOutlier","text":"vector outliers set NA.","code":""},{"path":"/reference/makeDesign.html","id":null,"dir":"Reference","previous_headings":"","what":"makeDesign — makeDesign","title":"makeDesign — makeDesign","text":"function aid making design file imaging experiment (design.csv).","code":""},{"path":"/reference/makeDesign.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"makeDesign — makeDesign","text":"","code":"makeDesign(   proj,   n.plate,   n.row = 8,   n.col = 12,   assay.type = NULL,   food = NULL,   od = NULL )"},{"path":"/reference/makeDesign.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"makeDesign — makeDesign","text":"proj name project design file used . Remember project name always follows 8-digit date project directories. example, project directory 20200130_toxin01A project name \"toxin01A\". project name used join design file cellprofiler-nf output data Metadata_Experiment variable, critical match exactly. n.plate number plates experiment. n.row number rows plates. Default 8 96-well plate. n.col number columns plates. Default 12 96-well plate. assay.type OPTIONAL: type assay run. example, \"48h\". food OPTIONAL: character description food used perform assay. example, \"15hHB101_20220727\". od OPTIONAL: final optical density bacterial food used assay. example, 10.","code":""},{"path":"/reference/makeDesign.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"makeDesign — makeDesign","text":"single data frame variables \"Metadata_Plate\" \"Metadata_Well\" variables can used design file readXpress function. data frame can augmented include specific drugs dilutents experimental design attributes desired. variables output include:","code":""},{"path":"/reference/makeDesign.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"makeDesign — makeDesign","text":"variables output follows:","code":""},{"path":"/reference/modelSelection.html","id":null,"dir":"Reference","previous_headings":"","what":"modelSelection — modelSelection","title":"modelSelection — modelSelection","text":"function assign appropriate CellProfiler model primary object raw_data object output readXpress function.","code":""},{"path":"/reference/modelSelection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"modelSelection — modelSelection","text":"","code":"modelSelection(df)"},{"path":"/reference/modelSelection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"modelSelection — modelSelection","text":"df single data frame containing worm object measurements CellProfiler model used assay. model variable required.","code":""},{"path":"/reference/modelSelection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"modelSelection — modelSelection","text":"single data frame named model_selected contains best CellProfiler model detecting worm objects within primary object detected CellProfiler.","code":""},{"path":"/reference/model_select_1.html","id":null,"dir":"Reference","previous_headings":"","what":"Generalized model for one worm object — model_select_1","title":"Generalized model for one worm object — model_select_1","text":"data frame contains generalized model selection dataframe one worm model CellProfiler run.","code":""},{"path":"/reference/model_select_1.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Generalized model for one worm object — model_select_1","text":"dataframe 3 rows 4 variables: m1 number objects identified model number 1 model_select final selected model model_flag flag classifier cluster_flag indicates presence cluster","code":""},{"path":"/reference/model_select_2.html","id":null,"dir":"Reference","previous_headings":"","what":"Generalized model for two worm objects — model_select_2","title":"Generalized model for two worm objects — model_select_2","text":"data frame contains generalized model selection dataframe two worm model CellProfiler run.","code":""},{"path":"/reference/model_select_2.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Generalized model for two worm objects — model_select_2","text":"dataframe 9 rows 5 variables: m1 number objects identified model number 1 m2 number objects identified model number 2 model_select final selected model model_flag flag classifier cluster_flag indicates presence cluster","code":""},{"path":"/reference/model_select_3.html","id":null,"dir":"Reference","previous_headings":"","what":"Generalized model for three worm objects — model_select_3","title":"Generalized model for three worm objects — model_select_3","text":"data frame contains generalized model selection dataframe three worm model CellProfiler run.","code":""},{"path":"/reference/model_select_3.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Generalized model for three worm objects — model_select_3","text":"dataframe 27 rows 6 variables: m1 number objects identified model number 1 m2 number objects identified model number 2 m3 number objects identified model number 3 model_select final selected model model_flag flag classifier cluster_flag indicates presence cluster","code":""},{"path":"/reference/model_select_4.html","id":null,"dir":"Reference","previous_headings":"","what":"Generalized model for four worm objects — model_select_4","title":"Generalized model for four worm objects — model_select_4","text":"data frame contains generalized model selection dataframe four worm model CellProfiler run.","code":""},{"path":"/reference/model_select_4.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Generalized model for four worm objects — model_select_4","text":"dataframe 81 rows 7 variables: m1 number objects identified model number 1 m2 number objects identified model number 2 m3 number objects identified model number 3 m4 number objects identified model number 4 model_select final selected model model_flag flag classifier cluster_flag indicates presence cluster","code":""},{"path":"/reference/nWF.html","id":null,"dir":"Reference","previous_headings":"","what":"nWF — nWF","title":"nWF — nWF","text":"function flag wells many objects.","code":""},{"path":"/reference/nWF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"nWF — nWF","text":"","code":"nWF(data, ..., max = 30, min = 5, plot = T)"},{"path":"/reference/nWF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"nWF — nWF","text":"data data frame output summarizeWells function. ... <[`dynamic-dots`][rlang::dyn-dots]> Variable(s) used group data ploting. Variable names data supplied separated commas without quotes. max numeric value used flag wells many objects. default 30. min numeric value used flag wells objects. default 5. plot Logical, TRUE, default. ggplot2 object returned showing distribution object counts wells (n).","code":""},{"path":"/reference/nWF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"nWF — nWF","text":"Either single data frame identical input data n_WellFlag variable added. n_WellFlag variable coded \"n<min\" n>max wells object counts (n) outside range set max min. , plot = T, list two elements, first element data frame, diagnostic plot.","code":""},{"path":"/reference/outlierOF.html","id":null,"dir":"Reference","previous_headings":"","what":"outlierOF — outlierOF","title":"outlierOF — outlierOF","text":"function flag outlier objects based worm_length_um variable.","code":""},{"path":"/reference/outlierOF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"outlierOF — outlierOF","text":"","code":"outlierOF(data, iqr = TRUE, thresh = NULL, filterOF = TRUE)"},{"path":"/reference/outlierOF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"outlierOF — outlierOF","text":"data data frame output modelSelection function. iqr Logical, TRUE, objects well called outliers worm_length_um outside range median(worm_length_um) +/- (thresh * IQR). FALSE, objects well called outliers worm_length_um outside range mean(worm_length_um) +/- (thresh * SD). default TRUE. NOTE: Interquartile Range (IQR) method useful distributions. Standard Deviation (SD) method applied normal distributions. thresh numeric value used calculate outliers. default parameter set NULL. thresh = NULL set recommended values within function: (1.5 iqr = TRUE) (3 iqr = FALSE). filterOF Logical, TRUE flagged objects detected data considered calculation outliers.","code":""},{"path":"/reference/outlierOF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"outlierOF — outlierOF","text":"single data frame identical input data outlier_ObjectFlag variable added. outlier_ObjectFlag variable coded \"outlier\" objects deemed outliers NA_character_ non-outliers.","code":""},{"path":"/reference/outlierWF.html","id":null,"dir":"Reference","previous_headings":"","what":"outlierWF — outlierWF","title":"outlierWF — outlierWF","text":"function flag outlier wells based median_wormlength_um wells.","code":""},{"path":"/reference/outlierWF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"outlierWF — outlierWF","text":"","code":"outlierWF(data, ..., iqr = TRUE, thresh = NULL, filterWF = TRUE)"},{"path":"/reference/outlierWF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"outlierWF — outlierWF","text":"data data frame output summarizeWellsfunction WF functions. ... <[`dynamic-dots`][rlang::dyn-dots]> Variable(s) used group well summarized data. Variable names data supplied separated commas without quotes. outliers detected across wells within group specified. iqr Logical, TRUE, wells group called outliers well median_wormlength_um outside range median(median_wormlength_um) +/- (thresh * IQR). FALSE, wells group called outliers well median_wormlength_um outside range mean(median_wormlength_um) +/- (thresh * SD). default TRUE. NOTE: Interquartile Range (IQR) method useful distributions. Standard Deviation (SD) method applied normal distributions. thresh numeric value used calculate outliers. default parameter set NULL. thresh = NULL set recommended values within function: (1.5 iqr = TRUE) (3 iqr = FALSE). filterWF Logical, TRUE flagged wells detected data considered calculation outliers.","code":""},{"path":"/reference/outlierWF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"outlierWF — outlierWF","text":"single data frame identical input data outlier_WellFlag variable added. outlier_WellFlag variable coded \"outlier\" objects deemed outliers NA_character_ non-outliers.","code":""},{"path":"/reference/plateThumbs.html","id":null,"dir":"Reference","previous_headings":"","what":"plateThumbs — plateThumbs","title":"plateThumbs — plateThumbs","text":"Make full 96-well plate image .png format well thumbnail images.","code":""},{"path":"/reference/plateThumbs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plateThumbs — plateThumbs","text":"","code":"plateThumbs(project_dir, plates = \"all\")"},{"path":"/reference/plateThumbs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plateThumbs — plateThumbs","text":"project_dir full path project directory. must contain raw_image_thumbs folder holding .png thumbnail images wells. wellThumbs function can used generate raw_image_thumbs folder .png thumbnails raw .TIFs. plates vector plate numbers make thumbs . vector used match plate patterns filelist.\"\" make thumbs plates.13:72 make thumbs wells plates p13 - p72.c(1, 3, 106) make thumbs plates p01, p03, p106.","code":""},{"path":"/reference/plateThumbs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plateThumbs — plateThumbs","text":"folder named raw_plate_thumbs project directory   containing individual .png files plate.","code":""},{"path":"/reference/process.html","id":null,"dir":"Reference","previous_headings":"","what":"process — process","title":"process — process","text":"process","code":""},{"path":"/reference/process.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"process — process","text":"","code":"process(flag_data, ...)"},{"path":"/reference/process.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"process — process","text":"flag_data Flagged data summarized ... specify variable used summarize data. Variable names can listed succession.","code":""},{"path":"/reference/process.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"process — process","text":"List four elements: raw data, processed data, summaries datasets.","code":""},{"path":"/reference/readXpress.html","id":null,"dir":"Reference","previous_headings":"","what":"readXpress — readXpress","title":"readXpress — readXpress","text":"function reads CellProfiler data R. built exclusively use worm image data saved .rda file.","code":""},{"path":"/reference/readXpress.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"readXpress — readXpress","text":"","code":"readXpress(   filedir,   rdafile,   design = FALSE,   px_per_um = 3.2937,   length_thresh = 98.811,   doseR = F )"},{"path":"/reference/readXpress.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"readXpress — readXpress","text":"filedir project directory directories CellProfiler data. Provide full path directory vector project directory paths. directory must cellprofiler-nf output .rda file sub-folder named cp_data. rdafile specific .rda file name cp_data directory read. multiple project directories supplied filedir, include .rda files project order directories given filedir. design Logical parameter, TRUE design file joined data. design file located sub-folder filedir named design. FALSE design file joined. px_per_um number pixels per micron (um) images. conversion factor vary different objectives microscopes. default set AndersenLab imageXpress nano 2X objective 3.2937 pixels per micron (um). Please enter another conversion factor necessary. length_thresh object length threshold um used filter objects data. default setting 98.811 um. standard threshold used AndersenLab images taken imageXpress nano. Please adjust necessary. doseR Logical, dose response data? default, doseR = FALSE, expects control data recorded design file particular way. Specifically, drug diluent variables identical controls, e.g, drug = DMSO, diluent = DMSO, concentration_um = 0. doseR = TRUE, controls expected coded differently, .e.g, drug = ABZ, diluent = DMSO, concentration_um = 0. Warning messages produced controls fit expectations, try ensure controls coded properly without relying function catch edge cases.","code":""},{"path":"/reference/readXpress.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"readXpress — readXpress","text":"list including two elements 1) data frame contains CellProfiler model outputs well experimental treatments design file used. multiple project directories .rda files supplied, joined together. 2) data frame contains complete design file read project directory directories. data frame useful checking completeness data filtering steps completed.","code":""},{"path":"/reference/regEff.html","id":null,"dir":"Reference","previous_headings":"","what":"regEff — regEff","title":"regEff — regEff","text":"function regress effect confounding variable dependent variable.","code":""},{"path":"/reference/regEff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"regEff — regEff","text":"","code":"regEff(data, ..., d.var, c.var)"},{"path":"/reference/regEff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"regEff — regEff","text":"data data frame output easyXpress function used modelSelection function. ... <[rlang::`dyn-dots`]> Variable(s) used group data prior regression. Variable names can listed succession. example, drug. d.var dependent variable use linear model. Supply variable without quotes. example, median_wormlength_um_delta. c.var confounding variable use linear model. Supply variable without quotes. example, bleach.","code":""},{"path":"/reference/regEff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"regEff — regEff","text":"list including four elements. 1) data frame, <>$d, three variables added. include, <d.var>_reg, <c.var>_reg_coeff, <c.var>_reg_sig. 2) diagnostic plot, <>$p1, showing effect confounding variable (c.var) dependent variable (d.var). 3) diagnositc plot, <>$p2, showing regression coefficients confounding variable (c.var) y-axis dependent variable (d.var) x-axis. 4) list, <>$models model objects group.","code":""},{"path":"/reference/sdOutlier.html","id":null,"dir":"Reference","previous_headings":"","what":"sdOutlier — sdOutlier","title":"sdOutlier — sdOutlier","text":"function identify outliers using standard deviation.","code":""},{"path":"/reference/sdOutlier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sdOutlier — sdOutlier","text":"","code":"sdOutlier(x, na.rm = TRUE, thresh)"},{"path":"/reference/sdOutlier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sdOutlier — sdOutlier","text":"x numerical vector perform outlier removal . na.rm Logical, TRUE, NAs removed claculation. thresh Numeric, constant multiply SD detecting outiers.","code":""},{"path":"/reference/sdOutlier.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"sdOutlier — sdOutlier","text":"vector outliers set NA.","code":""},{"path":"/reference/setFlags.html","id":null,"dir":"Reference","previous_headings":"","what":"setFlags — setFlags","title":"setFlags — setFlags","text":"setFlags","code":""},{"path":"/reference/setFlags.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"setFlags — setFlags","text":"","code":"setFlags(data, cluster_flag = TRUE, well_edge_flag = TRUE)"},{"path":"/reference/setFlags.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"setFlags — setFlags","text":"data CellProfiler data following model selection edge flagging cluster_flag Logical parameter; want worm objects cluster excluded calculating well outliers? recommend TRUE default. well_edge_flag Logical parameter; want worm objects close proximity well edge excluded calculating well outliers? recommend TRUE default.","code":""},{"path":"/reference/setFlags.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"setFlags — setFlags","text":"single data frame named raw_data contains CellProfiler model outputs experimental treatments design file used.","code":""},{"path":"/reference/setOF.html","id":null,"dir":"Reference","previous_headings":"","what":"setOF — setOF","title":"setOF — setOF","text":"function assign flagged objects single value returned objectFlag variable. useful collapsing many easyXpress OFs single flag label based order flags added data frame.","code":""},{"path":"/reference/setOF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"setOF — setOF","text":"","code":"setOF(data)"},{"path":"/reference/setOF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"setOF — setOF","text":"data data frame _ObjectFlag variables. Typically data generated easyXpress functions variable contains _ObjectFlag name considered.","code":""},{"path":"/reference/setOF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"setOF — setOF","text":"single data frame flagged objects labelled objectFlag variable. objects flagged labelled noFlag.","code":""},{"path":"/reference/setWF.html","id":null,"dir":"Reference","previous_headings":"","what":"setWF — setWF","title":"setWF — setWF","text":"function assign flagged wells single value returned wellFlag variable. useful collapsing many easyXpress WFs single flag label based order flags added data frame.","code":""},{"path":"/reference/setWF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"setWF — setWF","text":"","code":"setWF(data)"},{"path":"/reference/setWF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"setWF — setWF","text":"data data frame _WellFlag variables. Typically data generated easyXpress WF functions variable contains _WellFlag name considered.","code":""},{"path":"/reference/setWF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"setWF — setWF","text":"single data frame flagged wells labelled wellFlag variable. objects flagged labelled noFlag.","code":""},{"path":"/reference/summarizeWells.html","id":null,"dir":"Reference","previous_headings":"","what":"summarizeWells — summarizeWells","title":"summarizeWells — summarizeWells","text":"Summarize objects within wells calculating various population statistics, including median, mean, standard deviation, coefficient variation (CV) worm_length_um. number objects wells also calculated. output can used various well flag (WF) functions desired.","code":""},{"path":"/reference/summarizeWells.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"summarizeWells — summarizeWells","text":"","code":"summarizeWells(data, OF = \"filter\", drop = T)"},{"path":"/reference/summarizeWells.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"summarizeWells — summarizeWells","text":"data data frame output model_selection functions. Specify either \"filter\" \"ignore\". default \"filter\", filter flagged objects. \"ignore\" ignore flagged data include objects summary statistics well. Setting \"ignore\" recommended. drop Logical, TRUE, default. standard variables holding object data dropped. careful using FALSE. plan return using object level data, variables retained rows (objects) present. Therefore, unsummarized object data need rejoined summarized data present single dataframe. best practice retain object level data one data frame summarized well data another, can used well flag (WF) functions complete processing.","code":""},{"path":"/reference/summarizeWells.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"summarizeWells — summarizeWells","text":"data frame summary statistics wells used easyXpress well flag (WF) functions.","code":""},{"path":"/reference/tidyImages.html","id":null,"dir":"Reference","previous_headings":"","what":"tidyImages — tidyImages","title":"tidyImages — tidyImages","text":"Organize .TIF files exported imager platform creating raw_images subdirectory project directory, moving .TIF files , removing non-TIF files folders desired.","code":""},{"path":"/reference/tidyImages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"tidyImages — tidyImages","text":"","code":"tidyImages(project_dir, rm_other = FALSE)"},{"path":"/reference/tidyImages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"tidyImages — tidyImages","text":"project_dir full path project directory. folder contain .TIF images exported imaging platform. rm_other logical, remove non-TIF files folders .TIF files moved raw_images subfolder? Default FALSE. Set TRUE certain want remove non-TIF files folders project_dir .TIFs moved.","code":""},{"path":"/reference/tidyImages.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"tidyImages — tidyImages","text":"folder named raw_images directory specified  project_dir, contains .TIF image files project.","code":""},{"path":"/reference/tidyProject.html","id":null,"dir":"Reference","previous_headings":"","what":"tidyProject — tidyProject","title":"tidyProject — tidyProject","text":"Tidies .TIF files exported imaging platform makes thumbnails wells plates.","code":""},{"path":"/reference/tidyProject.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"tidyProject — tidyProject","text":"","code":"tidyProject(project_dir, rm_other = FALSE, plates = \"all\", max_dim = 512)"},{"path":"/reference/tidyProject.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"tidyProject — tidyProject","text":"project_dir full path project directory. folder contain .TIF images exported imaging platform. rm_other logical, remove non-TIF files folders .TIF files moved raw_images subfolder? Default FALSE. Set TRUE certain want remove non-TIF files folders project_dir .TIFs moved. plates vector plate numbers make thumbs . vector used match plate patterns filelist.\"\" make thumbs plates.13:72 make thumbs wells plates p13 - p72.c(1, 3, 106) make thumbs plates p01, p03, p106. max_dim maximum dimension resized images pixels. default value 512, scales 2048 pixel image 6.25 percent original resolution.","code":""},{"path":"/reference/tidyProject.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"tidyProject — tidyProject","text":"Folders named raw_images, raw_image_thumbs, raw_plate_thumbs   created directory specified project_dir. folders   match directory structure needed process images  AndersenLab/CellProfiler.","code":""},{"path":"/reference/titerWF.html","id":null,"dir":"Reference","previous_headings":"","what":"titerWF — titerWF","title":"titerWF — titerWF","text":"function flag wells belong bleaches highly variable worm titers.","code":""},{"path":"/reference/titerWF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"titerWF — titerWF","text":"","code":"titerWF(data, ..., thresh = 0.68, plot = T, doseR = F)"},{"path":"/reference/titerWF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"titerWF — titerWF","text":"data data frame output summarizeWells function. ... <[`dynamic-dots`][rlang::dyn-dots]> Variable(s) used group data independent bleaches strains. Variable names data supplied separated commas without quotes. Typically grouping variables : Metadata_Experiemnt, strain, bleach. thresh numeric value used threshold flag bleaches high coefficient variation well n (cv.n). Bleaches high cv.n often either -bleached titered incorrectly. plot Logical, TRUE, default. ggplot2 object returned showing distribution CVs worm number across wells control conditions independent bleaches. thresh value plotted red vertical line. doseR Logical, dose response data? default, doseR = FALSE, expects control data recorded design file particular way. Specifically, drug diluent variables identical controls, e.g, drug = DMSO, diluent = DMSO, concentration_um = 0. doseR = TRUE, controls expected coded differently, .e.g, drug = ABZ, diluent = DMSO, concentration_um = 0. Warning messages produced controls fit expectations, try ensure controls coded properly without relying function catch edge cases.","code":""},{"path":"/reference/titerWF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"titerWF — titerWF","text":"Either single data frame identical input data titer_WellFlag variable added. titer_WellFlag variable coded \"titer\" wells belonging strain coefficient variation worm number greater thresh. , plot = T list two elements, first element data frame, diagnostic plot.","code":""},{"path":"/reference/userOF.html","id":null,"dir":"Reference","previous_headings":"","what":"userOF — userOF","title":"userOF — userOF","text":"function flag objects based user provided variable input data.","code":""},{"path":"/reference/userOF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"userOF — userOF","text":"","code":"userOF(data, ...)"},{"path":"/reference/userOF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"userOF — userOF","text":"data data frame output modelSelection functions one user defined variables used flags. Note, varible(s) can contain multiple values single value desired. reason include multiple variables single value can preserve order flags assigned. cases may helpful. user concerned preserving order flags assigned specifying single variable multiple values sufficient preserve flag labels. ... <[`dynamic-dots`][rlang::dyn-dots]> Specify one variables user like use flagging objects. example, <length> <length, area>. variables converted easyXpress compatible flags output data. means converted class chr _ObjectFlag suffix appended name necessary. way user can supply whatever flags like data use downstream processing easyXpress framework. order flags infered position vars input data.","code":""},{"path":"/reference/userOF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"userOF — userOF","text":"single data frame identical input data var variable renamed <var>_ObjectFlag set class chr necessary.","code":""},{"path":"/reference/userWF.html","id":null,"dir":"Reference","previous_headings":"","what":"userWF — userWF","title":"userWF — userWF","text":"function flag wells based user provided variable input data.","code":""},{"path":"/reference/userWF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"userWF — userWF","text":"","code":"userWF(data, ...)"},{"path":"/reference/userWF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"userWF — userWF","text":"data data frame output summarizeWells WF functions one user defined variables used flags. Note, varible(s) can contain multiple values single value desired. reason include multiple variables single value can preserve order flags assigned. cases may helpful. user concerned preserving order flags assigned specifying single variable multiple values sufficient preserve flag labels. ... <[`dynamic-dots`][rlang::dyn-dots]> Specify one variables user like use flagging objects. example, <length> <length, area>. variables converted easyXpress compatible flags output data. means converted class chr _WellFlag suffix appended name necessary. way user can supply whatever flags like data use downstream processing easyXpress framework. order flags infered position vars input data.","code":""},{"path":"/reference/userWF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"userWF — userWF","text":"single data frame identical input data var variable renamed <var>_WellFlag set class chr necessary.","code":""},{"path":"/reference/viewDose.html","id":null,"dir":"Reference","previous_headings":"","what":"viewDose — viewDose","title":"viewDose — viewDose","text":"#'viewDose plots representative processed well images object centroids colored type concentration drug.","code":""},{"path":"/reference/viewDose.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"viewDose — viewDose","text":"","code":"viewDose(data, strain_name, drug_name, proc_img_dir)"},{"path":"/reference/viewDose.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"viewDose — viewDose","text":"data Unsummarised CellProfiler data output Xpress functon. Either raw processed data can viewed. strain_name character value strain use plots, e.g. \"N2\". drug_name character value drug use plots, e.g. \"paraquat\". proc_img_dir full path directory holding processed images.","code":""},{"path":"/reference/viewDose.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"viewDose — viewDose","text":"ggplot object representative wells dose selected drug strain. user specify individual wells used. view results specific well use viewWell function.","code":""},{"path":"/reference/viewOverlay.html","id":null,"dir":"Reference","previous_headings":"","what":"viewOverlay — viewOverlay","title":"viewOverlay — viewOverlay","text":"viewOverlay","code":""},{"path":"/reference/viewOverlay.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"viewOverlay — viewOverlay","text":"","code":"viewOverlay(   data,   proc.img.dir,   well.label,   obj.label,   obj.color = NULL,   obj.col.pal = NULL,   obj.shape = NULL,   obj.shape.pal = NULL,   text.anno = NULL,   file = NULL )"},{"path":"/reference/viewOverlay.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"viewOverlay — viewOverlay","text":"data data frame output modelSelection function easyXpress. dataframe filtered contain wells plotted. Please Arrange dataframe order overlays plotted. proc.img.dir variable name data holds full PATH directory holding processed images matching data. processed images must standard _overlay.png suffix file name output CellProfiler. well.label variable name data display well label. example, \"Metadata_Well\". obj.label variable name data label objects . example, \"model\". obj.color Optional: variable name data color objects . default NULL. obj.col.pal Optional: color palette obj.labels. vector colors names unique value obj.color. NULL passes color values obj.label. obj.shape Optional: variable name data use shape objects. default NULL. obj.shape.pal Optional: shape palette objects. vector shape values names unique value obj.shape. NULL passes shape values obj.label. text.anno Optional: variable name data used display text annotation object center. default value shifted vertically avoid plotting object center. file Optional: full path saving output plot. Default NULL just return ggplot2 plot.","code":""},{"path":"/reference/viewOverlay.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"viewOverlay — viewOverlay","text":"plot showing CellProfiler processed well overlays data objects annotated desired.","code":""},{"path":"/reference/viewPlate.html","id":null,"dir":"Reference","previous_headings":"","what":"viewPlate — viewPlate","title":"viewPlate — viewPlate","text":"viewPlate plots processed plate.","code":""},{"path":"/reference/viewPlate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"viewPlate — viewPlate","text":"","code":"viewPlate(df, plate)"},{"path":"/reference/viewPlate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"viewPlate — viewPlate","text":"df Summarised CellProfiler data output Xpress process functons. Either raw processed data can viewed. plate Desired plate analyzed.","code":""},{"path":"/reference/viewPlate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"viewPlate — viewPlate","text":"ggplot object selected plate.","code":""},{"path":"/reference/viewWell.html","id":null,"dir":"Reference","previous_headings":"","what":"viewWell — viewWell","title":"viewWell — viewWell","text":"viewWell plots processed well image object centroids colored type.","code":""},{"path":"/reference/viewWell.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"viewWell — viewWell","text":"","code":"viewWell(df, img_dir, plate, well, boxplot = TRUE)"},{"path":"/reference/viewWell.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"viewWell — viewWell","text":"df Unsummarised CellProfiler data output Xpress functon. Either raw processed data can viewed. img_dir full path directory holding processed images. plate Desired plate analyzed. well Desired well analyzed. boxplot output include boxplot object data?","code":""},{"path":"/reference/viewWell.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"viewWell — viewWell","text":"ggplot object selected well image boxplot.","code":""},{"path":"/reference/wellThumbs.html","id":null,"dir":"Reference","previous_headings":"","what":"wellThumbs — wellThumbs","title":"wellThumbs — wellThumbs","text":"Make .png thumbnails .TIF files raw_images directory. Making thumbs .TIFs requires ImageMagick installed system. install imagemagick Homebrew, enter:brew install imagemagick terminal.","code":""},{"path":"/reference/wellThumbs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"wellThumbs — wellThumbs","text":"","code":"wellThumbs(project_dir, plates = \"all\", max_dim = 512)"},{"path":"/reference/wellThumbs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"wellThumbs — wellThumbs","text":"project_dir full path project directory containing raw_images subdirectory. plates vector plate numbers make thumbs . vector used match plate patterns filelist.\"\" make thumbs wells plates.13:72 make thumbs wells plates p13 - p72.c(1, 3, 106) make thumbs wells plates p01, p03, p106. max_dim maximum dimension resized images pixels. default value 512, scales 2048 pixel image 6.25 percent original resolution.","code":""},{"path":"/reference/wellThumbs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"wellThumbs — wellThumbs","text":"folder named raw_image_thumbs directory specified  project_dir.","code":""}]
